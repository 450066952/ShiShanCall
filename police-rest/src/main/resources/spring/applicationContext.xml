<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
    
	<context:component-scan base-package="com.inch.rest.service" />
    
    <!--(数据源1) 基于Druid数据库链接池的数据源配置 -->
	<bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性driverClassName、 url、user、password -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<property name="initialSize" value="2" />
		<property name="minIdle" value="2" />
		<property name="maxActive" value="30" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="5000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 解密密码必须要配置的项 -->
		<property name="filters" value="stat,log4j" />
		
		<!--<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=true" />-->
	</bean>
	
	 <!--(数据源2) 基于Druid数据库链接池的数据源配置 -->
	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性driverClassName、 url、user、password -->
		<property name="driverClassName" value="${tony.driver}" />
		<property name="url" value="${tony.url}" />
		<property name="username" value="${tony.user}" />
		<property name="password" value="${tony.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<property name="initialSize" value="2" />
		<property name="minIdle" value="2" />
		<property name="maxActive" value="30" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="5000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 解密密码必须要配置的项 -->
		<property name="filters" value="stat,log4j" />
		
		<!--<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=true" />-->
	</bean>
	
	
	<!-- 编写spring 配置文件的配置多数源映射关系 -->
	<bean class="com.inch.rest.dbbase.DynamicDataSource" id="dataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry  key="now" value-ref="dataSource1"></entry>
				<entry  key="old" value-ref="dataSource2" ></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource1">
		</property>
	</bean>
    
    <!-- 配置sqlsessionFactory -->   
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
    </bean>	
    
    <!-- 配置扫描包，加载mapper代理对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.inch.rest.mapper" />
	</bean>
    
    <!-- 事务管理器 --> 
    <bean  id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource"> 
            <ref bean="dataSource" />
        </property>
    </bean>
    
     <!-- 配置事务的传播特性 
    （一般一个service里为一个事物，如果要在service里调用另外的service需要事务传播的控制）
    -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 指定哪些类的哪些方法参与事务管理 -->
	<!--<aop:config>-->
		<!--<aop:pointcut id="allServiceMethod" expression="execution(* com.inch.rest.service.*.*(..))" />-->
		<!--<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" />-->
	<!--</aop:config>-->


	<aop:config>
		<aop:advisor pointcut="execution(* com.inch.rest.mapper.*.*(..))"
					 advice-ref="txAdvice" />
	</aop:config>

	<bean id="SpringUtil" class="com.inch.rest.utils.SpringUtil"  />
    
</beans>